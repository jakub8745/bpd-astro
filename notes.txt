{
      "name": "3D exhibitions",
      "url": "",
      "hasChildren": true,
      "children": [
        {
          "name": "The exhibition 'Vincenz's Dialogues - Views' ",
          "url": "/vincenzs-dialogues-views"
        },
        {
          "name": "webGl/webXR art installation 'Milkmaid's Pitcher'",
          "url": "/milkmaids-pitcher"
        },
        {
          "name": "Tags",
          "url": "/tags"
        },
        {
          "name": "Elements",
          "url": "/elements"
        },
        {
          "name": "Contact",
          "url": "/contact"
        },
        {
          "name": "Privacy Policy",
          "url": "/privacy-policy"
        }
      ]
    }

     {
      "name": "Home",
      "url": "/"
    },


 w-full pt-12 pb-12">

 mx-auto pl-24 pr-[27rem] text-left">

  <header class="bg-black text-white">
        <div class="container">
          <div class="row">
            <div class="container col-md-8">
              <h1 set:html={markdownify(title)} class="h2 mb-2 text-white" />
              <ul
                class="mt-4 flex flex-wrap items-start justify-start text-white"
              >
                <li class="mx-3">
                  {
                    allAuthors
                      .filter((author) =>
                        authors
                          .map((author: string) => slugify(author))
                          .includes(slugify(author.data.title)),
                      )
                      .map((author, i) => (
                        <a
                          href={`/authors/${slugify(author.slug)}`}
                          class="flex items-center hover:text-primary font-medium"
                        >
                          {author.data.image && (
                            <Image
                              src={author.data.image}
                              alt={author.data.title}
                              height={50}
                              width={50}
                              class="mr-2 h-6 w-6 rounded-full"
                            />
                          )}
                          <span>{author.data.title}</span>
                        </a>
                      ))
                  }
                </li>
                <li class="mx-3 flex items-center flex-wrap font-medium">
                  <BiCalendarEdit className="mr-1 h-5 w-5 text-gray-600" />
                  {dateFormat(date)}
                </li>
                <li class="mx-3 flex items-center flex-wrap">
                  <BiCategoryAlt
                    className="mr-1 h-[18px] w-[18px] text-gray-600"
                  />
                  <ul>
                    {
                      categories.map((category: string, i: number) => (
                        <li class="inline-block">
                          <a
                            href={`/categories/${slugify(category)}`}
                            class="mr-2 hover:text-primary font-medium"
                          >
                            {humanize(category)}
                            {i !== post.data.categories.length - 1 && ","}
                          </a>
                        </li>
                      ))
                    }
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </header>


      ---
import Base from "@/layouts/Base.astro";
import { getTaxonomy } from "@/lib/taxonomyParser.astro";
import { humanize } from "@/lib/utils/textConverter";

import { FaHashtag } from "react-icons/fa";

const tags = await getTaxonomy("posts", "tags");
---

<Base title={"Tags"}>
  <section class="section">
    <div class="container text-center">
      <h1 class="h2 page-heading">Tags</h1>
      <ul class="space-x-4">
        {
          tags.map((tag) => (
            <li class="inline-block">
              <a
                href={`/tags/${tag}`}
                class="rounded-lg bg-theme-light px-4 py-2 text-dark transition hover:bg-primary hover:text-white flex items-center group"
              >
                <FaHashtag className="mr-1 text-primary group-hover:text-white transition" />
                <>{humanize(tag || "")}</>
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </section>
</Base>


---
import Base from "@/layouts/Base.astro";
import { getTaxonomy } from "@/lib/taxonomyParser.astro";
import { humanize } from "@/lib/utils/textConverter";
import { h } from 'preact';
import { useState } from 'preact/hooks';

const tags = await getTaxonomy("posts", "tags");

const [form, setForm] = useState({ name: '', email: '', subject: '', message: '' });
const [status, setStatus] = useState(null);

import { FaHashtag } from "react-icons/fa";


const handleSubmit = async (event: Event) => {
    event.preventDefault();
  try {
    const response = await fetch('/api/contact', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(form),
    });
    const result = await response.json();
    if (response.ok) {
      setStatus('Email sent successfully!');
      setForm({ name: '', email: '', subject: '', message: '' });
    } else {
      setStatus(`Error: ${result.error}`);
    }
  } catch (error) {
    setStatus('Error sending email.');
  }
};
---

<Base title={"Tags"}>
  <section class="section">
    <div class="container text-center">
      <h1 class="h2 page-heading">Tags</h1>
      <ul class="space-x-4">
        {tags.map((tag) => (
          <li class="inline-block">
            <a
              href={`/tags/${tag}`}
              class="rounded-lg bg-theme-light px-4 py-2 text-dark transition hover:bg-primary hover:text-white flex items-center group"
            >
              <FaHashtag className="mr-1 text-primary group-hover:text-white transition" />
              <>{humanize(tag || "")}</>
            </a>
          </li>
        ))}
      </ul>
    </div>
  </section>

  <section class="section">
    <div class="container">
      <h1 class="h2 page-heading">Contact Us</h1>
      <form onSubmit={handleSubmit}>
        <label>
          Name:
          <input
            type="text"
            value={form.name}
            onInput={(e) => setForm({ ...form, name: e.target.value })}
            required
          />
        </label>
        <br />
        <label>
          Email:
          <input
            type="email"
            value={form.email}
            onInput={(e) => setForm({ ...form, email: e.target.value })}
            required
          />
        </label>
        <br />
        <label>
          Subject:
          <input
            type="text"
            value={form.subject}
            onInput={(e) => setForm({ ...form, subject: e.target.value })}
          />
        </label>
        <br />
        <label>
          Message:
          <textarea
            value={form.message}
            onInput={(e) => setForm({ ...form, message: e.target.value })}
            required
          ></textarea>
        </label>
        <br />
        <button type="submit">Submit</button>
      </form>
      {status && <p>{status}</p>}
    </div>
  </section>
</Base>
